# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dDA9FhL6rQ7SjNVFZCSvCEQ6YTaq8rCg
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
import matplotlib.pyplot as plt

def plot_decision_regions(X, y, classifier, test_idx=None, resolution=0.02):
    import numpy as np
    import matplotlib.pyplot as plt
    from matplotlib.colors import ListedColormap


    # setup marker generator and color map
    markers = ('s', 'x', 'o', '^', 'v')
    colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan')
    cmap = ListedColormap(colors[:len(np.unique(y))])

    # plot the decision surface
    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution),
                           np.arange(x2_min, x2_max, resolution))
    Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)
    Z = Z.reshape(xx1.shape)
    plt.contourf(xx1, xx2, Z, alpha=0.3, cmap=cmap)
    plt.xlim(xx1.min(), xx1.max())
    plt.ylim(xx2.min(), xx2.max())

    for idx, cl in enumerate(np.unique(y)):
        plt.scatter(x=X[y == cl, 0], 
                    y=X[y == cl, 1],
                    alpha=0.8, 
                    c=colors[idx],
                    marker=markers[idx], 
                    label=cl, 
                    edgecolor='black')

    # highlight test samples
    if test_idx:
        # plot all samples
        X_test, y_test = X[test_idx, :], y[test_idx]

        plt.scatter(X_test[:, 0],
                    X_test[:, 1],
                    c='',
                    edgecolor='black',
                    alpha=1.0,
                    linewidth=1,
                    marker='o',
                    s=100, 
                    label='test set')

from google.colab import files
uploaded = files.upload()

import io
iris = pd.read_csv(io.BytesIO(uploaded['iris.csv']))
# Dataset is now stored in a Pandas Dataframe

#Lo convertimos en categoria y en categoría númerco
iris['variety'] = iris['variety'].astype('category')
iris['variety'] = iris['variety'].cat.codes

iris

# Split in train and test datasets "estratificado" en dos grupos. Lo hacemos de forma random
# 2D Attributes en 2 columnas X e Y (en X hay petal_lenght y petal_width y en Y hay la variedad) 
X = iris[['petal.length','petal.width']]
y = iris['variety']

# división en dos grupos: tran y test se hace con split random y estratificado para que salgan igual numero de cada clase en proporción
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1, stratify=y)
print('Class labels:', np.unique(y))
print('Labels counts in y:', np.bincount(y))
print('Labels counts in y_train:', np.bincount(y_train))
print('Labels counts in y_test:', np.bincount(y_test))

#asi puedo probar el modelo con el subconjunto de test

# KNeighborsClassifier (con distancia minkowski). .fit es para entrenar  y .predict para hacer una predicción
# https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html
# metrics https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.DistanceMetric.html

# model train metric='euclidean', n_neighbors=1
knn_model = KNeighborsClassifier(metric='minkowski', n_neighbors=5)
knn_model.fit(X_train, y_train)

# test prediction (vamos a probar con X_test y a ver que salida nos da: y_pred) ; Y:tests son las correctas 
# y_pred es lo que predice e y_test es la de verdad y nos dice que solo ha habido una muestra que ha clasificado mal
y_pred = knn_model.predict(X_test)
print('Misclassified samples: %d' % (y_test != y_pred).sum())
print('Accuracy: %.2f%%' % (100.0 * knn_model.score(X_test, y_test)))

# decision boundary
X_combined = np.vstack((X_train, X_test))
y_combined = np.hstack((y_train, y_test))
train_len = X_train.shape[0]
combined_len = X_combined.shape[0]



plt.figure(figsize=(6, 6), dpi=300)
plot_decision_regions(X=X_combined, y=y_combined, classifier=knn_model, test_idx=range(train_len, combined_len))
plt.xlabel('petal length [cm]')
plt.ylabel('petal width [cm]')
plt.legend(loc='upper left')
plt.tight_layout()
plt.show()